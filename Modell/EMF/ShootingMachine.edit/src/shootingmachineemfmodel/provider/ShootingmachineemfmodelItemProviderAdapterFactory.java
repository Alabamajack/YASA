/**
 */
package shootingmachineemfmodel.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import shootingmachineemfmodel.util.ShootingmachineemfmodelAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ShootingmachineemfmodelItemProviderAdapterFactory extends ShootingmachineemfmodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ShootingmachineemfmodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.ToplevelSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ToplevelSystemItemProvider toplevelSystemItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.ToplevelSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createToplevelSystemAdapter() {
		if (toplevelSystemItemProvider == null) {
			toplevelSystemItemProvider = new ToplevelSystemItemProvider(this);
		}

		return toplevelSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Brick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BrickItemProvider brickItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Brick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBrickAdapter() {
		if (brickItemProvider == null) {
			brickItemProvider = new BrickItemProvider(this);
		}

		return brickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.SA_Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SA_ComponentItemProvider sA_ComponentItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.SA_Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSA_ComponentAdapter() {
		if (sA_ComponentItemProvider == null) {
			sA_ComponentItemProvider = new SA_ComponentItemProvider(this);
		}

		return sA_ComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.SW_Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SW_ComponentItemProvider sW_ComponentItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.SW_Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSW_ComponentAdapter() {
		if (sW_ComponentItemProvider == null) {
			sW_ComponentItemProvider = new SW_ComponentItemProvider(this);
		}

		return sW_ComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Sender} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SenderItemProvider senderItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Sender}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSenderAdapter() {
		if (senderItemProvider == null) {
			senderItemProvider = new SenderItemProvider(this);
		}

		return senderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Client} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClientItemProvider clientItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Client}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClientAdapter() {
		if (clientItemProvider == null) {
			clientItemProvider = new ClientItemProvider(this);
		}

		return clientItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.SendEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SendEventItemProvider sendEventItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.SendEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSendEventAdapter() {
		if (sendEventItemProvider == null) {
			sendEventItemProvider = new SendEventItemProvider(this);
		}

		return sendEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Receiver} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReceiverItemProvider receiverItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Receiver}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReceiverAdapter() {
		if (receiverItemProvider == null) {
			receiverItemProvider = new ReceiverItemProvider(this);
		}

		return receiverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Server} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServerItemProvider serverItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Server}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServerAdapter() {
		if (serverItemProvider == null) {
			serverItemProvider = new ServerItemProvider(this);
		}

		return serverItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.GetEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetEventItemProvider getEventItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.GetEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetEventAdapter() {
		if (getEventItemProvider == null) {
			getEventItemProvider = new GetEventItemProvider(this);
		}

		return getEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Alarm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AlarmItemProvider alarmItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Alarm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAlarmAdapter() {
		if (alarmItemProvider == null) {
			alarmItemProvider = new AlarmItemProvider(this);
		}

		return alarmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Connections} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionsItemProvider connectionsItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Connections}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionsAdapter() {
		if (connectionsItemProvider == null) {
			connectionsItemProvider = new ConnectionsItemProvider(this);
		}

		return connectionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Runnable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunnableItemProvider runnableItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Runnable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunnableAdapter() {
		if (runnableItemProvider == null) {
			runnableItemProvider = new RunnableItemProvider(this);
		}

		return runnableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.HWIntern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWInternItemProvider hwInternItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.HWIntern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWInternAdapter() {
		if (hwInternItemProvider == null) {
			hwInternItemProvider = new HWInternItemProvider(this);
		}

		return hwInternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.HWExtern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HWExternItemProvider hwExternItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.HWExtern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHWExternAdapter() {
		if (hwExternItemProvider == null) {
			hwExternItemProvider = new HWExternItemProvider(this);
		}

		return hwExternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Motor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MotorItemProvider motorItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Motor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMotorAdapter() {
		if (motorItemProvider == null) {
			motorItemProvider = new MotorItemProvider(this);
		}

		return motorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Display} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DisplayItemProvider displayItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Display}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDisplayAdapter() {
		if (displayItemProvider == null) {
			displayItemProvider = new DisplayItemProvider(this);
		}

		return displayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.Message} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MessageItemProvider messageItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.Message}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMessageAdapter() {
		if (messageItemProvider == null) {
			messageItemProvider = new MessageItemProvider(this);
		}

		return messageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.InterBrickIn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterBrickInItemProvider interBrickInItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.InterBrickIn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterBrickInAdapter() {
		if (interBrickInItemProvider == null) {
			interBrickInItemProvider = new InterBrickInItemProvider(this);
		}

		return interBrickInItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link shootingmachineemfmodel.InterBrickOut} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterBrickOutItemProvider interBrickOutItemProvider;

	/**
	 * This creates an adapter for a {@link shootingmachineemfmodel.InterBrickOut}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterBrickOutAdapter() {
		if (interBrickOutItemProvider == null) {
			interBrickOutItemProvider = new InterBrickOutItemProvider(this);
		}

		return interBrickOutItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (toplevelSystemItemProvider != null) toplevelSystemItemProvider.dispose();
		if (brickItemProvider != null) brickItemProvider.dispose();
		if (sA_ComponentItemProvider != null) sA_ComponentItemProvider.dispose();
		if (sW_ComponentItemProvider != null) sW_ComponentItemProvider.dispose();
		if (senderItemProvider != null) senderItemProvider.dispose();
		if (clientItemProvider != null) clientItemProvider.dispose();
		if (sendEventItemProvider != null) sendEventItemProvider.dispose();
		if (receiverItemProvider != null) receiverItemProvider.dispose();
		if (serverItemProvider != null) serverItemProvider.dispose();
		if (getEventItemProvider != null) getEventItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (eventItemProvider != null) eventItemProvider.dispose();
		if (alarmItemProvider != null) alarmItemProvider.dispose();
		if (connectionsItemProvider != null) connectionsItemProvider.dispose();
		if (runnableItemProvider != null) runnableItemProvider.dispose();
		if (hwInternItemProvider != null) hwInternItemProvider.dispose();
		if (hwExternItemProvider != null) hwExternItemProvider.dispose();
		if (motorItemProvider != null) motorItemProvider.dispose();
		if (displayItemProvider != null) displayItemProvider.dispose();
		if (messageItemProvider != null) messageItemProvider.dispose();
		if (interBrickInItemProvider != null) interBrickInItemProvider.dispose();
		if (interBrickOutItemProvider != null) interBrickOutItemProvider.dispose();
	}

}
